import logo from './logo.svg';
import './App.css';
import React, { useEffect, useState } from 'react';

function App() {
  const [userData, setUserData] = useState([]);
  const [editingId, setEditingId] = useState(null);
  const [newUser, setNewUser] = useState({
    name: '',
    username: '',
    email: '',
    address: '',
    phone: '',
    website: '',
    company: '',
  });

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/users');
      if (!response.ok) {
        throw new Error('Failed to fetch users');
      }

      const data = await response.json();
      setUserData(data);
    } catch (error) {
      console.error(error.message);
    }
  };

  const handleEdit = (id) => {
    const userToEdit = userData.find(user => user.id === id);
    setEditingId(id);
    setNewUser(userToEdit); 
  };

  const handleDelete = async (id) => {
    try {
      const response = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {
        method: 'DELETE',
      });
      if (!response.ok) {
        throw new Error('Failed to delete user');
      }

      setUserData(userData.filter(user => user.id !== id));
    } catch (error) {
      console.error(error.message);
    }
  };

  const handleSave = async () => {
    try {
      const response = await fetch(`https://jsonplaceholder.typicode.com/users/${editingId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newUser),
      });
      if (!response.ok) {
        throw new Error('Failed to update user');
      }

      setEditingId(null);
    } catch (error) {
      console.error(error.message);
    }
  };

  const handleCancel = () => {
    setEditingId(null);
  };

  const handleChange = (e, field) => {
    const { value } = e.target;
    setNewUser(prevState => ({
      ...prevState,
      [field]: value,
    }));
  };

  const handleAdd = async () => {
    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/users', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newUser),
      });
      if (!response.ok) {
        throw new Error('Failed to add user');
      }

      const data = await response.json();
      setUserData([...userData, data]);

      setNewUser({
        name: '',
        username: '',
        email: '',
        address: '',
        phone: '',
        website: '',
        company: '',
      });
    } catch (error) {
      console.error(error.message);
    }
  };

  return (
    <div className="App">
      <h1>User Data</h1>
      <table className="data-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Username</th>
            <th>Email</th>
            <th>Address</th>
            <th>Phone</th>
            <th>Website</th>
            <th>Company</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {userData.map(user => (
            <tr key={user.id}>
              <td>{user.id}</td>
              {editingId === user.id ? (
                <>
                  <td><input type="text" value={newUser.name} onChange={(e) => handleChange(e, 'name')} /></td>
                  <td><input type="text" value={newUser.username} onChange={(e) => handleChange(e, 'username')} /></td>
                  <td><input type="text" value={newUser.email} onChange={(e) => handleChange(e, 'email')} /></td>
                  <td><input type="text" value={newUser.address} onChange={(e) => handleChange(e, 'address')} /></td>
                  <td><input type="text" value={newUser.phone} onChange={(e) => handleChange(e, 'phone')} /></td>
                  <td><input type="text" value={newUser.website} onChange={(e) => handleChange(e, 'website')} /></td>
                  <td><input type="text" value={newUser.company} onChange={(e) => handleChange(e, 'company')} /></td>
                  <td>
                    <button onClick={handleSave}>Save</button>
                    <button onClick={handleCancel}>Cancel</button>
                  </td>
                </>
              ) : (
                <>
                  <td>{user.name}</td>
                  <td>{user.username}</td>
                  <td>{user.email}</td>
                  <td>{`${user.address.street}, ${user.address.city}`}</td>
                  <td>{user.phone}</td>
                  <td>{user.website}</td>
                  <td>{user.company.name}</td>
                  <td>{user.company.catchPhrase}</td>
                  <td>{user.company.bs}</td>

                  <td>
                    <button onClick={() => handleEdit(user.id)}>Edit</button>
                    <button onClick={() => handleDelete(user.id)}>Delete</button>
                  </td>
                </>
              )}
            </tr>
          ))}
          <tr>
            <td>{userData.length + 1}</td>
            <td><input type="text" value={newUser.name} onChange={(e) => handleChange(e, 'name')} /></td>
            <td><input type="text" value={newUser.username} onChange={(e) => handleChange(e, 'username')} /></td>
            <td><input type="text" value={newUser.email} onChange={(e) => handleChange(e, 'email')} /></td>
            <td><input type="text" value={newUser.address} onChange={(e) => handleChange(e, 'address')} /></td>
            <td><input type="text" value={newUser.phone} onChange={(e) => handleChange(e, 'phone')} /></td>
            <td><input type="text" value={newUser.website} onChange={(e) => handleChange(e, 'website')} /></td>
            <td><input type="text" value={newUser.company} onChange={(e) => handleChange(e, 'company')} /></td>
            <td><button onClick={handleAdd}>Add</button></td>
          </tr>
        </tbody>
      </table>
    </div>
  );
}

export default App;






// css file


.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


.data-table {
  border-collapse: collapse;
  width: 100%;
}

.data-table th, .data-table td {
  border: 1px solid #ddd; /* Change border color */
  text-align: left;
  padding: 20px;
}

.data-table th {
  background-color: #f2f2f2;
  color: #333; 
}

.data-table td {
  background-color: #f9f9f9; 
}
